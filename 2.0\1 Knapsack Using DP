2. Solve 0/1 Knapsack problem using Dynamic Programming.

#include <stdio.h>

int knapsack_01(int val[], int wt[], int n, int W) {
    int dp[n+1][W+1];
    
    // Build the dp table in a bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                dp[i][w] = 0;  // If no items or capacity is 0, value is 0
            }
            else if (wt[i-1] <= w) {
                dp[i][w] = (dp[i-1][w] > val[i-1] + dp[i-1][w - wt[i-1]]) ? dp[i-1][w] : val[i-1] + dp[i-1][w - wt[i-1]];
            }
            else {
                dp[i][w] = dp[i-1][w];
            }
        }
    }
    return dp[n][W];
}

int main() {
    int val[] = {60, 100, 120};
    int wt[] = {10, 20, 30};
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);

    int max_value = knapsack_01(val, wt, n, W);
    printf("Maximum value in Knapsack = %d\n", max_value);

    return 0;
}

