#include <stdio.h>
#define INF 9999
#define MAX 10

void dijkstra(int G[MAX][MAX], int n, int start) {
    int dist[MAX], pred[MAX], visited[MAX] = {0}, cost[MAX][MAX];
    
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            cost[i][j] = (G[i][j] == 0) ? INF : G[i][j];
    
    for (int i = 0; i < n; i++) {
        dist[i] = cost[start][i];
        pred[i] = start;
    }
    
    dist[start] = 0;
    visited[start] = 1;
    
    for (int count = 1; count < n - 1; count++) {
        int mindist = INF, nextnode = -1;
        
        for (int i = 0; i < n; i++)
            if (!visited[i] && dist[i] < mindist)
                mindist = dist[i], nextnode = i;
        
        if (nextnode == -1) break;
        visited[nextnode] = 1;
        
        for (int i = 0; i < n; i++)
            if (!visited[i] && mindist + cost[nextnode][i] < dist[i])
                dist[i] = mindist + cost[nextnode][i], pred[i] = nextnode;
    }
    
    for (int i = 0; i < n; i++) {
        if (i != start) {
            printf("Distance to %d = %d\nPath: %d", i, dist[i], i);
            for (int j = i; j != start; j = pred[j])
                printf(" <- %d", pred[j]);
            printf("\n");
        }
    }
}

int main() {
    int n, start, G[MAX][MAX];
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &G[i][j]);
    printf("Enter starting node: ");
    scanf("%d", &start);
    dijkstra(G, n, start);
    return 0;
}
