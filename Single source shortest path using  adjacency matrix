#include <stdio.h>
#define INFINITY 9999
#define MAX 10

void dijkstra(int G[MAX][MAX], int n, int startnode) {
    int distance[MAX], pred[MAX];
    int visited[MAX] = {0};
    int cost[MAX][MAX];
    int count, mindistance, nextnode = 0;

    // Initialize cost matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (G[i][j] == 0)
                cost[i][j] = INFINITY;
            else
                cost[i][j] = G[i][j];
        }
    }

    // Initialize distances, predecessors, and visited array
    for (int i = 0; i < n; i++) {
        distance[i] = cost[startnode][i];
        pred[i] = startnode;
        visited[i] = 0;
    }

    distance[startnode] = 0;
    visited[startnode] = 1;
    count = 1;

    // Dijkstra's algorithm
    while (count < n - 1) {
        mindistance = INFINITY;

        for (int i = 0; i < n; i++) {
            if (distance[i] < mindistance && !visited[i]) {
                mindistance = distance[i];
                nextnode = i;
            }
        }

        visited[nextnode] = 1;
        for (int i = 0; i < n; i++) {
            if (!visited[i] && (mindistance + cost[nextnode][i] < distance[i])) {
                distance[i] = mindistance + cost[nextnode][i];
                pred[i] = nextnode;
            }
        }
        count++;
    }

    // Print the shortest paths and distances
    for (int i = 0; i < n; i++) {
        if (i != startnode) {
            printf("Distance of node %d = %d\n", i, distance[i]);
            printf("Path = %d", i);
            int j = i;
            while (j != startnode) {
                j = pred[j];
                printf(" <- %d", j);
            }
            printf("\n");
        }
    }
}

int main() {
    int n, startnode;
    int G[MAX][MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &G[i][j]);
        }
    }

    printf("Enter the starting node: ");
    scanf("%d", &startnode);

    dijkstra(G, n, startnode);
    return 0;
}
