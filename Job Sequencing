Implement job sequencing with deadlines using greedy method 

import java.util.Arrays;

class Job {
    String id;
    int deadline;
    int profit;

    public Job(String id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }
}

class JobSequencing {
    private static int minValue(int x, int y) {
        return Math.min(x, y);
    }

    public static void jobSequencingWithDeadline(Job[] jobs, int n) {
        int i, j, k, maxProfit = 0;

        // Find max deadline value
        int dmax = 0;
        for (Job job : jobs) {
            if (job.deadline > dmax) {
                dmax = job.deadline;
            }
        }

        // Free time slots initialized to -1 (-1 denotes EMPTY)
        int[] timeslot = new int[dmax + 1];
        Arrays.fill(timeslot, -1);

        int filledTimeSlot = 0;

        for (i = 0; i < n; i++) {
            k = minValue(dmax, jobs[i].deadline);
            while (k >= 1) {
                if (timeslot[k] == -1) {
                    timeslot[k] = i;
                    filledTimeSlot++;
                    break;
                }
                k--;
            }

            // If all time slots are filled, stop
            if (filledTimeSlot == dmax) {
                break;
            }
        }

        // Print required jobs
        System.out.print("\nRequired Jobs: ");
        for (i = 1; i <= dmax; i++) {
            if (timeslot[i] != -1) {
                System.out.print(jobs[timeslot[i]].id);
                if (i < dmax) {
                    System.out.print(" --> ");
                }
            }
        }

        // Calculate max profit
        for (i = 1; i <= dmax; i++) {
            if (timeslot[i] != -1) {
                maxProfit += jobs[timeslot[i]].profit;
            }
        }
        System.out.println("\nMax Profit: " + maxProfit);
    }

    public static void main(String[] args) {
        Job[] jobs = {
            new Job("j1", 2, 60),
            new Job("j2", 1, 100),
            new Job("j3", 3, 20),
            new Job("j4", 2, 40),
            new Job("j5", 1, 20)
        };

        int n = jobs.length;

        // Sort jobs by profit in descending order
        Arrays.sort(jobs, (a, b) -> b.profit - a.profit);

        System.out.printf("%10s %10s %10s\n", "Job", "Deadline", "Profit");
        for (Job job : jobs) {
            System.out.printf("%10s %10d %10d\n", job.id, job.deadline, job.profit);
        }

        jobSequencingWithDeadline(jobs, n);
    }
}
