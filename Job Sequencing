#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct {
    char id[5];
    int deadline;
    int profit;
} Job;

// Comparator function to sort jobs in descending order of profit
int compare(const void *a, const void *b) {
    return ((Job *)b)->profit - ((Job *)a)->profit;
}

// Function to get the minimum of two numbers
int min(int x, int y) {
    return (x < y) ? x : y;
}

// Function to perform job sequencing
void jobSequencingWithDeadline(Job jobs[], int n) {
    int i, j, k, maxProfit = 0;

    // Find max deadline value
    int dmax = 0;
    for (i = 0; i < n; i++) {
        if (jobs[i].deadline > dmax) {
            dmax = jobs[i].deadline;
        }
    }

    // Free time slots initialized to -1 (-1 denotes EMPTY)
    int timeslot[dmax + 1];
    for (i = 0; i <= dmax; i++) {
        timeslot[i] = -1;
    }

    int filledTimeSlot = 0;

    for (i = 0; i < n; i++) {
        k = min(dmax, jobs[i].deadline);
        while (k >= 1) {
            if (timeslot[k] == -1) {
                timeslot[k] = i;
                filledTimeSlot++;
                break;
            }
            k--;
        }

        // If all time slots are filled, stop
        if (filledTimeSlot == dmax) {
            break;
        }
    }

    // Print required jobs
    printf("\nRequired Jobs: ");
    for (i = 1; i <= dmax; i++) {
        if (timeslot[i] != -1) {
            printf("%s", jobs[timeslot[i]].id);
            if (i < dmax) {
                printf(" --> ");
            }
        }
    }

    // Calculate max profit
    for (i = 1; i <= dmax; i++) {
        if (timeslot[i] != -1) {
            maxProfit += jobs[timeslot[i]].profit;
        }
    }
    printf("\nMax Profit: %d\n", maxProfit);
}

int main() {
    Job jobs[] = {
        {"j1", 2, 60},
        {"j2", 1, 100},
        {"j3", 3, 20},
        {"j4", 2, 40},
        {"j5", 1, 20}
    };

    int n = sizeof(jobs) / sizeof(jobs[0]);

    // Sort jobs by profit in descending order
    qsort(jobs, n, sizeof(Job), compare);


    jobSequencingWithDeadline(jobs, n);
    return 0;
}
