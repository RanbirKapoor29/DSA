 Single source shortest paths using greedy method


import java.util.*;

class Node {
    int dest, cost;
    Node next;

    public Node(int dest, int cost) {
        this.dest = dest;
        this.cost = cost;
        this.next = null;
    }
}

class Graph {
    int n;
    Node[] adjList;

    public Graph(int n) {
        this.n = n;
        adjList = new Node[n];
    }

    public void addEdge(int source, int dest, int cost) {
        Node newNode = new Node(dest, cost);
        newNode.next = adjList[source];
        adjList[source] = newNode;
    }

    public void displayEdges() {
        for (int i = 0; i < n; i++) {
            System.out.print("Adjacency list of vertex " + i + "\n");
            Node temp = adjList[i];
            while (temp != null) {
                System.out.print("(" + i + ")---(" + temp.dest + "|" + temp.cost + ") ");
                temp = temp.next;
            }
            System.out.println();
        }
    }
}

public class Dijkstra {
    public static int findMinVertex(int[] dist, boolean[] visited, int n) {
        int minDist = Integer.MAX_VALUE;
        int minIndex = -1;
        for (int i = 0; i < n; i++) {
            if (!visited[i] && dist[i] < minDist) {
                minDist = dist[i];
                minIndex = i;
            }
        }
        return minIndex;
    }

    public static void dijkstra(Graph graph, int[] dist, int[] prev, int start) {
        int n = graph.n;
        boolean[] visited = new boolean[n];

        Arrays.fill(dist, Integer.MAX_VALUE);
        Arrays.fill(prev, -1);
        dist[start] = 0;

        for (int i = 0; i < n; i++) {
            int u = findMinVertex(dist, visited, n);
            if (u == -1) break;
            visited[u] = true;

            Node temp = graph.adjList[u];
            while (temp != null) {
                int v = temp.dest;
                int weight = temp.cost;
                if (!visited[v] && dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    prev[v] = u;
                }
                temp = temp.next;
            }
        }
    }

    public static void main(String[] args) {
        int n = 7;
        Graph g = new Graph(n);
        int[] dist = new int[n], prev = new int[n];
        int start = 0;

        g.addEdge(0, 1, 3);
        g.addEdge(0, 2, 6);
        g.addEdge(1, 0, 3);
        g.addEdge(1, 2, 2);
        g.addEdge(1, 3, 1);
        g.addEdge(2, 1, 6);
        g.addEdge(2, 1, 2);
        g.addEdge(2, 3, 1);
        g.addEdge(2, 4, 4);
        g.addEdge(2, 5, 2);
        g.addEdge(3, 1, 1);
        g.addEdge(3, 2, 1);
        g.addEdge(3, 4, 2);
        g.addEdge(3, 6, 4);
        g.addEdge(4, 2, 4);
        g.addEdge(4, 3, 2);
        g.addEdge(4, 5, 2);
        g.addEdge(4, 6, 1);
        g.addEdge(5, 2, 2);
        g.addEdge(5, 4, 2);
        g.addEdge(5, 6, 1);
        g.addEdge(6, 3, 4);
        g.addEdge(6, 4, 1);
        g.addEdge(6, 5, 1);

        dijkstra(g, dist, prev, start);

        for (int i = 0; i < n; i++) {
            if (i != start) {
                System.out.println("Start " + start + " to " + i + ", Cost: " + dist[i] + ", Previous: " + prev[i]);
            }
        }
    }
}
